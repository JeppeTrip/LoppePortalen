@startuml
Participant OrganiserStore
Participant Organiser
Participant MarketStore

[o-> OrganiserStore : updateOrganiserFromDb(dto)
OrganiserStore <- OrganiserStore : getOrganiser(id)

alt Organiser Exists
  OrganiserStore -> Organiser : updateFromDb(dto)
  Organiser <- Organiser : getState()

  alt state = updating
    Organiser --> OrganiserStore : return(this)
  else
    Organiser -> Organiser : setState(updating)
    note over Organiser
      Organiser updates own values as well.
    end note
    group Foreach [Market in dto market collection]
      Organiser -> MarketStore : updateMarketFromDb(dto)
      note over MarketStore
        From here the updateMarketFromDb procedure runs. 
        found in another diagram.
      end note
      MarketStore --> Organiser : return(market)
      alt Market is not in collection
      Organiser -> Organiser : addMarket()
      end
    end
    Organiser -> Organiser : setState(idle)
    Organiser --> OrganiserStore : return(this)
  end
else
  OrganiserStore -> NewOrganiser ** : create
  OrganiserStore -> OrganiserStore : addOrganiser(NewOrganiser)
  OrganiserStore -> NewOrganiser : updateFromDb(dto)
  note over NewOrganiser
    From here the procedure 
    is the same as for an 
    existing organiser
  end note
  NewOrganiser --> OrganiserStore : return(this)
end



[o<- OrganiserStore : return(organiser)

@enduml